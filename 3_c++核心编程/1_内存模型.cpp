//
// Created by NUC on 2023/4/5.
//

/*
    本阶段主要针对C++面向对象编程技术做详细讲解, 探讨C++中的核心和精髓.

    内存模型:
        代码区: 存放函数体的二进制代码, 由OS进行管理.
        全局区: 存放全局变量和静态变量以及常量
        栈区: 由编译器自动分配释放, 存放函数的参数值, 局部变量值
        堆区: 由程序员分配和释放, 若程序员不释放, 则程序结束时由操作系统回收.
    不同区域, 表示不同的生命周期, 给我们更大的编程灵活.

    程序运行前:
        程序再编译后, 生成exe可执行程序, 未执行该程序前分为两个区域:
        代码区:
            存放CPU执行的机器指令
            代码区是共享的, 共享的目的是对于频繁被执行的程序, 只需要再内存中有一份代码即可.
            代码是只读的, 使其只读为了防止程序意外修改它的指令.
            共享只读, 可复用.
        全局区:
            全局变量和静态变量存放在此.
            全局区还包含了常量区, 字符串常量和其他常量也存放在此. const修饰, #define
            该区域的数据再程序结束后由操作系统释放.
            全局变量, 静态变量, 字符串常量, const修饰的全局变量(全局常量)
    程序运行后:
        栈区: 由编译器自动分配释放, 存放函数的参数值, 局部变量等.
            不要返回局部变量的地址, 栈区数据自动回收由编译器自动释放.
            主要存放局部变量, 由OS进行管理(释放)
        堆区: 由程序员管理开辟和释放.
            在c++中主要利用new在堆区开辟内存.
            利用new关键字可以创建堆区的数据. 利用free()可以释放所指向的内存.
            利用delete操作符进行释放.

    new操作符:
        c++利用new操作符在堆区开辟数据
        堆区开辟的数据, 由程序员手动开辟, 手动释放, 释放利用操作符delete.
        语法: new 数据类型
        利用new创建的数据, 会返回该数据对应的类型的指针. 用指针接收.




 */

#include <iostream>
#include <string>

using namespace std;

// 1.new的基本用法:
int * func(){
    // 在堆区创建整形数据.
    // new返回是 该数据类型的指针.

    int *p = new int(10);
    return p;
}
void test01(){
    int *p = func();
    cout << *p << endl; // 10

    // 释放: 利用关键字delete:
    delete p; // p是指针.

    cout << *p << endl; // 1135828096 乱码.
}

// 在堆区利用new开辟数组:
void test02(){
    // 创建10整形数据的数组, 在堆区.
    int *p_arr = new int[10]; // 10表示数组由10个元素, 返回首地址

    for (int i = 0; i < 10; i++){
        p_arr[i] = i+100;
    }
    for (int i = 0; i < 10; i++){
        cout << p_arr[i] << endl;
    }

    // 释放堆区数组:
    // 释放数组的时候, 需要加上[]. 告诉编译器这是一段连续的地址.
    delete [] p_arr;


}



// 在函数体外面声明的变量就是全局变量.
int g_a = 10;

// const修饰的全局变量 -> 全局常量
const int c_g_a = 10;


int *func(int b ) { // 形参数据也会放在栈区.
    int a = 10; // 局部变量, 存放再栈区. 生命周期结束, 自动释放.
    return &a; //
}

// 在堆区开辟数据:
int *func2(){
    int *a = new int(10); // new关键字, 返回堆区创建变量的指针.
    /*
        这里 new int(10)是堆变量. 不会被销毁. 由程序员自己管理.
        int *a 是局部变量, 用来指向这个堆中的地址. 所以是存放在栈区的.
     */
    return a; //
}


int main() {
    test01();
    test02();
    return 0;

//    int *p = func(1);
//    cout << *p << endl; // 第一次可以打印正确的数字, 是因为编译器做了保留.
//    cout << *p << endl; // 第二次这个数据就不再保留了

    int *p = func2();
    cout <<  *p << endl; // 10 堆区这块的内存是我们自己创建的, 不会被销毁.
    // 由程序员管理, 想怎么用就怎么用.

    free(p); // 释放所指向内存.



    // 在函数体内部定义的变量
    int l_a = 10; // 普通变量

    // 在普通变量前面加上static就是静态变量.
    static int s_a = 10;

    // 常量: 字符串常量和const修饰常量.
    // 字符串常量
    cout << &"lipu" << endl;

    // const修饰的变量
    // const修饰的全局变量, const修饰的局部变量.
    const int c_l_a = 10; // const local.




    return 0;

}